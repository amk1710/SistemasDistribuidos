#include "/home/terra/TerraNG/terra/TerraNet.defs"

var ushort nodeId = getNodeId();


pktype identification from radioMsg with
	var ushort id;
end

/*
var usrMsg sndData;
var usrMsg recData;
sndData.type=1;
sndData.target = BROADCAST;
sndData.source = nodeId;
sndData.d32[0] = 0;
*/

//construct neighbors list:
//up to 10 direct neighbors
var ushort[10] neighbors_ids;
var ushort qtd_neighbors = 0;

var identification send_id;
send_id.type = 1;
send_id.target = BROADCAST;
send_id.source = nodeId;
send_id.id = nodeId;

var identification receive_id;

//emite mensagem a todos os vizinhos, avisando o seu proprio ID
//var ushort delay= random()%500; // [0 .. 500]
//await (delay)ms; 
//emit SEND(send_id);

//espera por 10 segundo pelo aviso dos vizinhos
par/or do
	par/and do
		loop do
			receive_id = await RECEIVE;
			neighbors_ids[qtd_neighbors] = receive_id.id;
			qtd_neighbors = qtd_neighbors + 1;
			emit LEDS(TOGGLE);
		end
	with
		var ushort delay= random()%5000; // [0 .. 4999]
		await (delay)ms; 
		emit SEND(send_id);
		await SEND_DONE;
	end
	
with
	loop do
		await 10s;
		break;
	end
end

//fim da identificação dos vizinhos

//uso um campo ushort para identificar entre queries ou agente ao receber uma mensagem
var ushort query = 5;
var ushort agent = 6;
var ushort max_jumps = 4;
var ushort maxJumpsQuery = 100;

pktype agent from radioMsg with
	//var ushort msg_type;	
	var ushort n_jumps;
	var ushort agent_id;
	var ushort last_neighbor;
end

pktype query from radioMsg with
	var ushort n_jumps;
	var ushort last_neighbor;
	var ushort event_type; // não tenho muito certeza dessa...
	//em uma query, eu estou procurando por tipos de evento, ou por um evento específico, com um ID específico?
end

//começo do loop de espera por queries ou agentes

var agent ag_msg;
ag_msg.type = agent;
ag_msg.target = neighbors_ids[0];
//ag_msg.msg_type = agent;
ag_msg.n_jumps = 0;

var query ex_query;
ex_query.n_jumps = 0;
ex_query.last_neighbor = 44;
ex_query.event_type = query;
ex_query.type = query;


var ushort times_received = 0;

if nodeId == 11 then
	//send agent	
	ag_msg.target = 12;
	ag_msg.n_jumps = 0;
	emit SEND(ag_msg);
end

if nodeId == 44 then
	await 3s;	
	//send query
	emit LED0(ON);
	emit LED1(ON);
	emit LED2(ON);
	ex_query.target = 34;
	emit SEND(ex_query);
	await SEND_DONE;


end

var agent rec_ag;
var agent rec_query;

var byte hasReceivedAgent = 0;

par do
	loop do
		rec_ag = await RECEIVE;
		if rec_ag.type == agent then
			hasReceivedAgent = 1;
			emit LED0(ON);
			emit LED1(OFF);
			emit LED2(ON);			
			if rec_ag.n_jumps < max_jumps then
				//repassa o agente a outro vizinho
				
				//escolhe vizinho aleatório, mas não pode ser o mesmo que me enviou o agente
				var ushort neighbor_index;
				var ushort temp = 0;		
				
				//esse código pra sortear um vizinho tá muito burro... tem que um jeito melhor, mesmo com as restrições da linguagem
				loop i,1000 do
					temp = random()%qtd_neighbors;
					if neighbors_ids[temp] != ag_msg.last_neighbor then neighbor_index = temp; end
				end
				rec_ag.n_jumps = rec_ag.n_jumps + 1;
				rec_ag.target = neighbors_ids[neighbor_index];
				rec_ag.last_neighbor = nodeId;
				
				//qPut(rec_ag);
				emit SEND(rec_ag);
				await SEND_DONE;
			end
		end
	end
with
	loop do
		rec_query = await RECEIVE;
		if rec_query.type == query then
			if hasReceivedAgent then
				//esse nó registrou o caminho para o evento buscado!
				emit LED0(ON);
				emit LED1(ON);
				emit LED2(ON);
			else/if rec_query.n_jumps < maxJumpsQuery then
				//encaminho a query pra outro nó aleatório
				//escolhe vizinho aleatório, mas não pode ser o mesmo que me enviou o agente
				
				var ushort neighbor_index;
				var ushort temp = 0;		
				
				//esse código pra sortear um vizinho tá muito burro... tem que um jeito melhor, mesmo com as restrições da linguagem
				loop i,1000 do
					temp = random()%qtd_neighbors;
					if neighbors_ids[temp] != rec_query.last_neighbor then neighbor_index = temp; end
				end
				rec_query.n_jumps = rec_query.n_jumps + 1;
				rec_query.last_neighbor = nodeId;
				rec_query.target = neighbors_ids[neighbor_index];
				qPut(rec_query);			
				//emit SEND(rec_query);
				//await SEND_DONE;
				
			end
			
		end

	end

//enviar mensagens que estão na fila, até fila acabar
with
	//qClear();
	loop do
		if qSize() == 0 then
			await Q_READY;
		end
		//sends message from queue
		var identification msgVar;
		qGet(msgVar);
		emit SEND(msgVar);
		await SEND_DONE;
	end



end






/*
if nodeId == 11 then
par do
	loop do
		emit REQ_TEMP();
		sndData.d16[0] = await TEMP;
		emit SEND(sndData);
		await SEND_DONE;
		inc sndData.d8[0];
		await 2s;
	end
with
	loop do
		recData = await RECEIVE;
		emit LEDS(recData.d8[0]);
	end
end
emit LED0(ON);
end
*/
